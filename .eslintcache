[{"D:\\react\\itincubator\\socialTC\\social-ts\\src\\index.tsx":"1","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\profile-reducer.ts":"2","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Header\\Header.tsx":"3","D:\\react\\itincubator\\socialTC\\social-ts\\src\\App.tsx":"4","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\Myposts.tsx":"5","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\dialog-reducer.ts":"6","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\MypostsContainer.tsx":"7","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Dialogs.tsx":"8","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsContainer.tsx":"9","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Navbar\\Navbar.tsx":"10","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\redux-store.ts":"11","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Posts\\Post\\Post.tsx":"12","D:\\react\\itincubator\\socialTC\\social-ts\\src\\serviceWorker.ts":"13","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\Profile.tsx":"14","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"15","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsItem\\DialogsItem.tsx":"16","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Messages\\Messages.tsx":"17","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users.tsx":"18","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\User-reducer.ts":"19","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users-container.tsx":"20","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsHook.tsx":"21","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\UsersClass.tsx":"22"},{"size":688,"mtime":1607455723371,"results":"23","hashOfConfig":"24"},{"size":2465,"mtime":1607261381338,"results":"25","hashOfConfig":"24"},{"size":351,"mtime":1603478538150,"results":"26","hashOfConfig":"24"},{"size":1527,"mtime":1608087142710,"results":"27","hashOfConfig":"24"},{"size":1170,"mtime":1607262129450,"results":"28","hashOfConfig":"24"},{"size":2396,"mtime":1608164612229,"results":"29","hashOfConfig":"24"},{"size":1598,"mtime":1607281722717,"results":"30","hashOfConfig":"24"},{"size":1424,"mtime":1607455723227,"results":"31","hashOfConfig":"24"},{"size":1986,"mtime":1607282124436,"results":"32","hashOfConfig":"24"},{"size":988,"mtime":1608087432882,"results":"33","hashOfConfig":"24"},{"size":500,"mtime":1607455723358,"results":"34","hashOfConfig":"24"},{"size":422,"mtime":1606645497510,"results":"35","hashOfConfig":"24"},{"size":5295,"mtime":499162500000,"results":"36","hashOfConfig":"24"},{"size":577,"mtime":1607178542866,"results":"37","hashOfConfig":"24"},{"size":377,"mtime":1603658642908,"results":"38","hashOfConfig":"24"},{"size":383,"mtime":1608087492851,"results":"39","hashOfConfig":"24"},{"size":248,"mtime":1606645497619,"results":"40","hashOfConfig":"24"},{"size":1910,"mtime":1608166423507,"results":"41","hashOfConfig":"24"},{"size":3315,"mtime":1608560786294,"results":"42","hashOfConfig":"24"},{"size":3336,"mtime":1608565185217,"results":"43","hashOfConfig":"24"},{"size":2545,"mtime":1609085109378,"results":"44","hashOfConfig":"24"},{"size":2498,"mtime":1608563992069,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"1ogfr1x",{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"49"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"49"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"49"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"49"},"D:\\react\\itincubator\\socialTC\\social-ts\\src\\index.tsx",["110"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nconst state = store.getState()\r\n\r\n\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n        ,\r\n        document.getElementById('root')\r\n    );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n    serviceWorker.unregister();\r\n",["111","112"],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\profile-reducer.ts",["113","114","115"],"import React, {ReactType} from 'react';\r\nimport {MessageType} from \"./store\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCounts: number\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\nconst ADDPOST = \"ADDPOST\"\r\nconst CHANGEPOSTTEXT = \"CHANGEPOSTTEXT\"\r\nconst ADDMESSAGE = \"ADDMESSAGE\"\r\nconst CHANGEMESSAGE = \"CHANGEMESSAGE\"\r\n\r\nlet initialState: ProfilePageType = {\r\n\r\n\r\n    posts: [\r\n        {id: 1, message: \"its my first yeSS post\", likeCounts: 10},\r\n        {id: 2, message: \"hi howe are you\", likeCounts: 15},\r\n        {id: 3, message: \"itkamasytra\", likeCounts: 15},\r\n        {id: 4, message: \"yo\", likeCounts: 15},\r\n        {id: 5, message: \"youuu\", likeCounts: 15},\r\n        {id: 6, message: \"meas6\", likeCounts: 15},\r\n    ],\r\n    newPostText: \"it kamasyrtaaa\"\r\n\r\n}\r\nexport type returnStateProfilereducerType = typeof initialState\r\n\r\nexport type AddPostActionType = {\r\n    type: typeof ADDPOST\r\n}\r\nexport type UpdateTextPost = {\r\n    type: typeof CHANGEPOSTTEXT\r\n    text: string\r\n}\r\n\r\n\r\nexport type AddMessageActionType = {\r\n    type: typeof ADDMESSAGE\r\n}\r\nexport type UpdateTextMessage = {\r\n    type: typeof CHANGEMESSAGE\r\n    text: string\r\n}\r\nexport type ActionsTypes = AddPostActionType | UpdateTextPost | AddMessageActionType | UpdateTextMessage\r\n\r\n// export type ActionsTypes = ReturnType<typeof AddPostAC> | ReturnType<typeof ChangePostTextAÐ¡>\r\n\r\n\r\nexport const AddPostAC = () => ({type: \"ADDPOST\"} as const)\r\nexport const ChangePostTextAC = (text: string) => ({type: \"CHANGEPOSTTEXT\", text: text} as const)\r\n\r\nexport function profileReducer(state = initialState, action: ActionsTypes): returnStateProfilereducerType {\r\n    switch (action.type) {\r\n        case \"ADDPOST\":\r\n            const NewPost: PostType = {\r\n                id: 3,\r\n                message: state.newPostText,\r\n                likeCounts: 20\r\n            }\r\n            return {\r\n                ...state, posts: [...state.posts, NewPost],\r\n                newPostText:\"\"\r\n            }\r\n        case \"CHANGEPOSTTEXT\":\r\n            return {\r\n                ...state,newPostText:action.text}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n//\r\n// export const addPost=()=>{\r\n//     return async (dispatch:any)=>dispatch(AddPostAC())\r\n// }\r\n// export const newposttextHandler=(text: string) => {\r\n//     return async (dispatch:any)=>{\r\n//     dispatch(ChangePostTextAÐ¡(text))}\r\n// }\r\n//\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Header\\Header.tsx",["116"],"import React from \"react\";\r\nimport s from './Header.module.css';\r\n\r\ntype HeaderPropsType={\r\n\r\n}\r\nconst Header: React.FC<HeaderPropsType> =(props)=>{\r\n   return(\r\n       <header className={s.header}>\r\n           <img src={\"https://cdn.mos.cms.futurecdn.net/BVb3Wzn9orDR8mwVnhrSyd-320-80.jpg\"}/>\r\n\r\n       </header>\r\n   )\r\n\r\n}\r\nexport default Header\r\n\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\App.tsx",["117","118","119","120","121","122"],"import React from 'react';\r\nimport './App.css';\r\n\r\nimport {DialogType, MessageType, PostType, StoreType, store, ActionsTypes} from \"./redux/store\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport {Navbar} from \"./Components/Navbar/Navbar\";\r\nimport {Profile} from \"./Components/Profile/Profile\";\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from './Components/Users/Users-container';\r\nimport {DialogsHook} from \"./Components/Dialogs/DialogsHook\";\r\n\r\ntype AppPropsType = {\r\n    // posts: Array<PostType>\r\n    // dialogs: Array<DialogType>\r\n    // messages: Array<MessageType>\r\n    // newPostText: string\r\n    // NewDialogMessage: string\r\n    // dispatch: (action: ActionsTypes) => void\r\n\r\n}\r\n\r\nfunction App(props: AppPropsType) {\r\n\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className='app-wrapper'>\r\n                <Header/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path='/profile' render={() => <Profile\r\n                       />}/>\r\n                       <Route path='/dialogsHook' render={() => <DialogsHook\r\n                       />}/>\r\n                    <Route path='/dialogs' render={() => <DialogsContainer\r\n                    />}/>\r\n                    <Route path='/users' render={()=><UsersContainer/>}/>\r\n\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\Myposts.tsx",["123","124"],"import React, {ChangeEvent, RefObject} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"../../Posts/Post/Post\";\r\nimport {ActionsTypes, PostType} from \"../../../redux/store\";\r\n\r\nexport type PostsType = {\r\n    newPostText: string\r\n    addPost: () => void\r\n    posts: Array<PostType>\r\n    newposttextHandler: (text: string) => void\r\n}\r\nexport const Myposts: React.FC<PostsType> = (props) => {\r\n\r\n    let postElement = props.posts.map(p => <Post key={p.id} message={p.message} likeCounts={p.likeCounts} id={p.id}/>)\r\n\r\n    function addPost() {\r\n        props.addPost()\r\n    }\r\n\r\n    const newposttextHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (e.currentTarget) {\r\n            props.newposttextHandler(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n\r\n    return <div className={s.postsBlock}>\r\n        my posts\r\n        <div>\r\n            <div><textarea value={props.newPostText} onChange={newposttextHandler}/></div>\r\n\r\n            <div>\r\n                <button onClick={addPost}>Addpost</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postElement}\r\n\r\n\r\n        </div>\r\n    </div>\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\dialog-reducer.ts",["125"],"import React from 'react';\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type NewMessageType={\r\n    NewDialogMessage:string\r\n\r\n}\r\nexport type DialogsPageType = {\r\n    messages: Array<MessageType>\r\n    NewDialogMessage: string\r\n    dialogs: Array<DialogType>\r\n}\r\nconst ADDPOST=\"ADDPOST\"\r\nconst CHANGEPOSTTEXT=\"CHANGEPOSTTEXT\"\r\nconst ADDMESSAGE=\"ADDMESSAGE\"\r\nconst CHANGEMESSAGE=\"CHANGEMESSAGE\"\r\n\r\nlet initialState: DialogsPageType = {\r\n    NewDialogMessage: \"yu\",\r\n    messages: [\r\n        {id: 1, message: \"hi\"},\r\n        {id: 2, message: \"HOOK\"},\r\n        {id: 3, message: \"itkamasytra\"},\r\n        {id: 4, message: \"yo\"},\r\n        {id: 5, message: \"youuu\"},\r\n        {id: 6, message: \"HOOK\"},\r\n    ],\r\n    dialogs: [\r\n        {id: 1, name: \"Dmitych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Viktor\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ]\r\n\r\n}\r\n\r\nexport type AddPostActionType = {\r\n    type: typeof ADDPOST\r\n}\r\nexport type UpdateTextPost = {\r\n    type: typeof CHANGEPOSTTEXT\r\n    text: string\r\n}\r\n\r\n\r\nexport type AddMessageActionType = {\r\n    type: typeof ADDMESSAGE\r\n}\r\nexport type UpdateTextMessage = {\r\n    type: typeof CHANGEMESSAGE\r\n    text: string\r\n}\r\nexport type ActionsTypes = AddPostActionType | UpdateTextPost | AddMessageActionType | UpdateTextMessage\r\n// export type ActionsTypes = ReturnType<typeof AddMessageTypeAC> | ReturnType<typeof ChangeMessageAc>\r\nexport type returnStateDialogReducerType=typeof initialState\r\nexport const AddMessageTypeAC = () => ({type: \"ADDMESSAGE\"} as const)\r\nexport const ChangeMessageAc = (text: string) => ({type: \"CHANGEMESSAGE\", text: text} as const)\r\n\r\n\r\nexport function dialogReducer(state = initialState, action: ActionsTypes):returnStateDialogReducerType {\r\n    switch (action.type) {\r\n        case \"ADDMESSAGE\":\r\n            const NewMessage: MessageType = {id: 10, message: state.NewDialogMessage}\r\n            return {\r\n                ...state,\r\n                messages:[...state.messages,NewMessage],\r\n                NewDialogMessage:\"\"\r\n            }\r\n\r\n        case \"CHANGEMESSAGE\":\r\n            return {\r\n                ...state,\r\n                NewDialogMessage: action.text\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\MypostsContainer.tsx",["126","127","128","129","130","131","132"],"import React, {ChangeEvent, RefObject} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"../../Posts/Post/Post\";\r\nimport {ActionsTypes, PostType} from \"../../../redux/store\";\r\nimport {AddPostAC, ChangePostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {Myposts, PostsType} from \"./Myposts\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// type PostsType = {\r\n//     // newPostText: string\r\n//     // dispatch: (action: ActionsTypes) => void\r\n//     // posts: Array<PostType>\r\n// }\r\ntype MDTPtype = {\r\n    addPost: () => void\r\n    newposttextHandler: (text: string) => void\r\n\r\n}\r\n// const MypostsConrainer: React.FC<PostsType> = (props) => {\r\n//\r\n//\r\n//     return <>\r\n//\r\n//         <Myposts addPost={addPost} posts={posts}\r\n//                  newPostText={newPostText}\r\n//                  newposttextHandler={newposttextHandler}/>\r\n//\r\n//     </>\r\n// }\r\nconst MSTP = (state: RootState) => ({\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n)\r\ntype MSTPType={\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\nconst MDTP = (dispatch: any) => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(AddPostAC())\r\n        },\r\n        newposttextHandler: (text: string) => {\r\n            dispatch(ChangePostTextAC(text))\r\n        }\r\n    }\r\n}\r\n// <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n\r\n\r\n\r\nconst MypostsConrainer= connect<MSTPType,MDTPtype,{},RootState>(MSTP, MDTP)(Myposts)\r\nexport default MypostsConrainer","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Dialogs.tsx",["133","134"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {ActionsTypes, DialogType, MessageType} from \"../../redux/store\";\r\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Message} from \"./Messages/Messages\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\n\r\ntype DialogsPagesType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    NewDialogMessage:string\r\n    onclickHandler:()=>void\r\n    changeHandler:(text:string)=>void\r\n}\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsPagesType> = (props) => {\r\n\r\n\r\n\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElement = props.messages.map(m => <Message id={m.id}  message={m.message}/>)\r\nconst onclickHandler=()=>{\r\n       props.onclickHandler()\r\n}\r\n  const changeHandler=(e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n        if( e.currentTarget)\r\n        {\r\n            props.changeHandler(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n\r\n    return <div className={s.dialogs}>\r\n\r\n        <div className={s.dialogsitem}>\r\n\r\n            {dialogsElements}\r\n\r\n        </div>\r\n        <div className={s.messages}>\r\n\r\n            {messagesElement}\r\n            <div>\r\n                <textarea onChange={changeHandler} value={props.NewDialogMessage} />\r\n            </div>\r\n            <button onClick={onclickHandler}>Send</button>\r\n        </div>\r\n\r\n    </div>\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsContainer.tsx",["135","136","137","138","139","140","141","142"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {ActionsTypes, DialogType, MessageType, StoreType} from \"../../redux/store\";\r\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Message} from \"./Messages/Messages\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport {AddMessageTypeAC, ChangeMessageAc} from \"../../redux/dialog-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\n\r\ntype DialogsPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    NewDialogMessage: string\r\n    dispatch: (action: ActionsTypes) => void\r\n\r\n}\r\n\r\n\r\n/*export const DialogsContainer: React.FC<DialogsPageType> = (props) => {\r\n\r\n    const onclickHandler = () => {\r\n        props.dispatch(AddMessageTypeAC())\r\n    }\r\n    const changeHandler = (text: string) => {\r\n\r\n        props.dispatch(ChangeMessageAc(text))\r\n\r\n    }\r\n\r\n\r\n    return <>\r\n        <Dialogs dialogs={props.dialogs}\r\n                 messages={props.messages}\r\n                 NewDialogMessage={props.NewDialogMessage}\r\n                 onclickHandler={onclickHandler}\r\n                 changeHandler={changeHandler}\r\n        />\r\n    </>\r\n}*/\r\ntype MSTPType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>,\r\n    NewDialogMessage: string\r\n}\r\n\r\ntype MDTPType = {\r\n    onclickHandler: () => void\r\n    changeHandler: (text: string) => void\r\n}\r\nconst MSTP = (state: RootState) => ({\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n    NewDialogMessage: state.dialogsPage.NewDialogMessage\r\n})\r\n\r\nconst MDTP = (dispatch: any) => ({\r\n    onclickHandler: () => {\r\n        dispatch(AddMessageTypeAC())\r\n    },\r\n    changeHandler: (text: string) => {\r\n        dispatch(ChangeMessageAc(text))\r\n    }\r\n})\r\n\r\nconst DialogsContainer = connect<MSTPType,MDTPType,{},RootState >(MSTP, MDTP)(Dialogs)\r\nexport default DialogsContainer","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Navbar\\Navbar.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\redux-store.ts",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Posts\\Post\\Post.tsx",["143"],"import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostType} from \"../../../redux/store\";\r\n\r\nexport const Post: React.FC<PostType> =(props)=> {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://klike.net/uploads/posts/2019-09/medium/1567844265_11.jpeg'/>\r\n            {props.message}\r\n            <div><span>Like: </span>  {props.likeCounts}</div>\r\n        </div>\r\n    )\r\n}",["144","145"],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\serviceWorker.ts",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\Profile.tsx",["146","147","148"],"import React from \"react\";\r\n\r\nimport s from './Profile.module.css'\r\nimport {Myposts} from \"./MyPosts/Myposts\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ActionsTypes, PostType} from \"../../redux/store\";\r\nimport MypostsConrainer from \"./MyPosts/MypostsContainer\";\r\ntype ProfilePropsType={\r\n    // posts:Array<PostType>\r\n    // newPostText:string\r\n    // dispatch:(action:ActionsTypes)=>void\r\n\r\n}\r\nexport const Profile: React.FC<ProfilePropsType>=(props)=> {\r\n\r\n\r\nreturn <div className={s.content}>\r\n    <ProfileInfo/>\r\n    <MypostsConrainer/>\r\n</div>\r\n\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["149"],"import React from \"react\";\r\n\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfilePropsType={\r\n\r\n}\r\nexport const ProfileInfo: React.FC<ProfilePropsType>=(props)=> {\r\nreturn <div className={s.content}>\r\n    <div><img src={\"https://cdn.mos.cms.futurecdn.net/BVb3Wzn9orDR8mwVnhrSyd-320-80.jpg\"}/></div>\r\n    <div className={s.description}>ava + discrtptoi</div>\r\n\r\n</div>\r\n\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsItem\\DialogsItem.tsx",["150"],"import React from \"react\";\r\nimport s from '../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { DialogType } from \"../../../redux/store\";\r\n\r\nexport const DialogItem: React.FC<DialogType> =(props)=>{\r\n    return  <div className={s.dialog}>\r\n        <NavLink activeClassName={s.active} to={\"/dialogsHook/\"+`${props.id}`}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Messages\\Messages.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users.tsx",["151","152"],"import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {userType} from \"../../redux/User-reducer\";\r\nimport userPhoto from \"../../assets/picture/icons8-user-100.png\";\r\nimport styles from \"./users.module.css\";\r\nimport * as axios from 'axios';\r\ntype propstype={\r\n    users:Array<userType>\r\n    follow: (id:string)=>void\r\n    unfollow: (id:string)=>void\r\n    setUsers: (users:any)=> void\r\n}\r\n\r\n    function Users(props:propstype) {\r\n\r\n        return <div>\r\n            {props.users.map(u => <div key={u.id}>\r\n\r\n                <NavLink to={'/profile/' + u.id}>\r\n                    <div><img\r\n                        src={userPhoto}\r\n                        // src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                              className={styles.photo}\r\n                    />\r\n                    </div>\r\n                </NavLink>\r\n                <div>{u.followed\r\n                    ? <button\r\n                        onClick={()=>{props.unfollow(u.id)}}\r\n                        // disabled={props.followingProgress.some(id => id === u.id)}\r\n                        //       onClick={() => {\r\n                        //           props.unfollowThunk(u.id)\r\n                        //       }}\r\n                    > Unfollow</button>\r\n                    : <button\r\n                        onClick={()=>{props.follow(u.id)}}\r\n                    //     disabled={props.followingProgress.some(id => id === u.id)} onClick={() => {\r\n                    //\r\n                    //     props.followThunk(u.id)\r\n                    //\r\n                    // }}\r\n                    > Follow</button>\r\n                }</div>\r\n                <div>u.fullName</div>\r\n                <div>u.status</div>\r\n                <div>u.location.country</div>\r\n                <div>u.location.city</div>\r\n            </div>)}\r\n\r\n\r\n        </div>\r\n    }\r\n\r\nexport default Users\r\n\r\n",["153","154"],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\User-reducer.ts",["155"],"const FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SETUSERS = \"SETUSERS\"\r\nconst SETPAGE = \"SETAPGE\"\r\nconst SETTOTALCOUNT= \"SETTOTALCOUNT\"\r\n\r\n\r\ntype SETTOTALCOUNTType={\r\n    type: typeof SETTOTALCOUNT\r\n    count:number\r\n}\r\ntype SETPAGEType = {\r\n    type: typeof SETPAGE\r\n    page: number\r\n}\r\ntype FOLLOWType = {\r\n    type: typeof FOLLOW\r\n    id: string\r\n}\r\ntype UNFOLLOWType = {\r\n    type: typeof UNFOLLOW\r\n    id: string\r\n}\r\ntype SETUSERSType = {\r\n    type: typeof SETUSERS\r\n    users: any\r\n}\r\n// export type returnStateUserreducerType = ReturnType<typeof initialState>\r\nconst initialState: inittype = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalCount: 100,\r\n    currentPage: 2\r\n}\r\nexport type inittype = {\r\n    users: Array<usersTypeRes>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n}\r\nexport type usersTypeRes = {\r\n\r\n    name: string\r\n    id: string\r\n    uniqueUrlName: null | string\r\n    photos: phototype\r\n    status: null | string\r\n    followed: boolean\r\n\r\n}\r\ntype phototype = {\r\n    small: string\r\n    large: string\r\n}\r\nexport  type    userType = {\r\n    id: string\r\n    followed: boolean\r\n    fullName: string\r\n    status: string\r\n    location: locationtype\r\n}\r\ntype locationtype = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nlet initialStatetype2 = {\r\n    users: [] as Array<userType>, //user type undefined\r\n    pageSize: 10,\r\n    totalUssrCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingProgress: [] as Array<number>\r\n}\r\nlet initialStateType = typeof initialStatetype2\r\nexport type ActionsTypes = FOLLOWType | UNFOLLOWType | SETUSERSType | SETPAGEType |SETTOTALCOUNTType\r\n\r\n// export type ActionsTypes = ReturnType<typeof AddPostAC> | ReturnType<typeof ChangePostTextAÐ¡>\r\n\r\nexport const SetCurrentPageAc = (page: number): SETPAGEType =>\r\n    ({type: SETPAGE, page} as const)\r\nexport const FollowAc = (id: string): FOLLOWType =>\r\n    ({type: FOLLOW, id} as const)\r\nexport const UnfollowAc = (id: string): UNFOLLOWType =>\r\n    ({type: UNFOLLOW, id} as const)\r\nexport const SetUsersAC = (users: any): SETUSERSType =>\r\n    ({type: SETUSERS, users})\r\nexport const setTotalCount= (count:number) =>\r\n    ({type: SETTOTALCOUNT, count} as const)\r\n\r\nexport function UserReducer(state: inittype = initialState, action: ActionsTypes): inittype {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state, users: [...state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })]\r\n            }\r\n\r\n\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state, users: [...state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })]\r\n            }\r\n        case \"SETAPGE\":\r\n            return {\r\n                ...state, currentPage: action.page\r\n            }\r\n        case \"SETUSERS\":\r\n\r\n            return {...state, users: action.users}\r\n        case  \"SETTOTALCOUNT\":\r\n            return {\r\n                ...state,totalCount:action.count\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\n\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users-container.tsx",["156","157","158"],"import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {\r\n    FollowAc,\r\n    SetCurrentPageAc,\r\n    setTotalCount,\r\n    SetUsersAC,\r\n    UnfollowAc,\r\n    usersTypeRes\r\n} from \"../../redux/User-reducer\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\nimport UsersClass from \"./UsersClass\";\r\nimport Axios, {AxiosResponse, AxiosError} from 'axios';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype MSTPType = {\r\n    users: Array<usersTypeRes>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n\r\n}\r\ntype MDTPType = {\r\n    follow: (id: string) => void\r\n    unfollow: (id: string) => void\r\n    setUsers: (users: any) => void\r\n    setCurrentPage: (page:number)=>void\r\n    setTotalCount: (count:number)=>void\r\n\r\n}\r\n\r\n\r\n\r\ntype propstype = {\r\n    users: Array<usersTypeRes>\r\n    follow: (id: string) => void\r\n    unfollow: (id: string) => void\r\n    setUsers: (users: any) => void\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n    setTotalCount: (count:number)=> void\r\n}\r\n\r\n\r\nclass UsersContainer extends React.Component<propstype, any> {\r\n    componentDidMount() {\r\n\r\n        Axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n\r\n            .then((res) => {\r\n                this.props.setUsers(res.data.items)\r\n                this.props.setTotalCount(res.data.totalCount)\r\n\r\n            })\r\n\r\n\r\n    }\r\n\r\n    onPageChanged = (p: number) => {\r\n        this.props.setCurrentPage(p)\r\n\r\n\r\n        Axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${this.props.pageSize}`)\r\n\r\n            .then((res) => {\r\n                this.props.setUsers(res.data.items)\r\n\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return <div>\r\n            <UsersClass users={this.props.users}\r\n                        onPageChanged={this.onPageChanged}\r\n                        follow={this.props.follow}\r\n                        unfollow={this.props.follow}\r\n                        setUsers={this.props.setUsers}\r\n                        pageSize={this.props.pageSize}\r\n                        totalCount={this.props.totalCount}\r\n                        currentPage={this.props.currentPage}\r\n                        setCurrentPage={this.props.setCurrentPage}\r\n                        setTotalCount={this.props.setTotalCount}\r\n            />\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst MSTP = (state: RootState) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalCount: state.usersPage.totalCount,\r\n        currentPage: state.usersPage.currentPage\r\n\r\n    }\r\n}\r\nconst MDTP = (dispatch: any) => ({\r\n\r\n        follow: (id: string) => {\r\n            dispatch(FollowAc(id))\r\n        },\r\n        unfollow: (id: string) => {\r\n            dispatch(UnfollowAc(id))\r\n        },\r\n        setUsers: (users: any) => {\r\n            dispatch(SetUsersAC(users))\r\n        },\r\n        setCurrentPage: (page:number)=>{\r\n            dispatch(SetCurrentPageAc(page))\r\n        },\r\n        setTotalCount: (count:number)=>{\r\n            dispatch(setTotalCount(count))\r\n        }\r\n\r\n    }\r\n)\r\n\r\n\r\nexport default connect<MSTPType, MDTPType, {}, RootState>(MSTP, MDTP)(UsersContainer)\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsHook.tsx",["159","160","161","162","163","164","165","166"],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\UsersClass.tsx",["167","168","169","170","171","172","173"],"import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {usersTypeRes, userType} from \"../../redux/User-reducer\";\r\nimport userPhoto from \"../../assets/picture/icons8-user-100.png\";\r\nimport styles from \"./users.module.css\";\r\nimport * as axios from 'axios';\r\nimport {render} from \"react-dom\";\r\nimport Axios, {AxiosResponse, AxiosError} from 'axios';\r\n\r\ntype propstype = {\r\n    users: Array<usersTypeRes>\r\n    follow: (id: string) => void\r\n    unfollow: (id: string) => void\r\n    setUsers: (users: any) => void\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n    setTotalCount: (count:number)=> void\r\n    onPageChanged:(p:number)=>void\r\n}\r\n\r\n\r\nclass UsersClass extends React.Component<propstype, any> {\r\n \r\n\r\n    render() {\r\n\r\n        let pageCount = Math.ceil(this.props.totalCount / this.props.pageSize)\r\n\r\n        let pages = []\r\n        for (let i = 0; i <= pageCount; i++) {\r\n            pages.push(i)\r\n        }\r\n        return <div>\r\n\r\n            <div>\r\n                {pages.map(p => {\r\n                    return (\r\n\r\n                        <span onClick={(e) => {\r\n                            this.props.onPageChanged(p)\r\n                        }} className={this.props.currentPage === p ? styles.selected : \"\"}>{p}</span>\r\n                    )\r\n                })}\r\n\r\n\r\n            </div>\r\n\r\n\r\n            <button>getddd user</button>\r\n            {this.props.users.map(u => <div key={u.id}>\r\n\r\n                <NavLink to={'/profile/' + u.id}>\r\n                    <div><img\r\n                        src={u.photos.small||userPhoto}\r\n                        className={styles.photo}\r\n                    />\r\n\r\n                    </div>\r\n                </NavLink>\r\n                <div>{u.followed\r\n                    ? <button\r\n                        onClick={() => {\r\n                            this.props.unfollow(u.id)\r\n                        }}\r\n\r\n                    > Unfollow</button>\r\n                    : <button\r\n                        onClick={() => {\r\n                            this.props.follow(u.id)\r\n                        }}\r\n\r\n                    > Follow</button>\r\n                }</div>\r\n                <div>name:{u.name}</div>\r\n                <div>{u.followed}</div>\r\n                <div>id:{u.id}</div>\r\n                <div>{u.status}</div>\r\n                <div>city</div>\r\n            </div>)}\r\n\r\n\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default UsersClass",{"ruleId":"174","severity":1,"message":"175","line":11,"column":7,"nodeType":"176","messageId":"177","endLine":11,"endColumn":12},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"174","severity":1,"message":"182","line":1,"column":8,"nodeType":"176","messageId":"177","endLine":1,"endColumn":13},{"ruleId":"174","severity":1,"message":"183","line":1,"column":16,"nodeType":"176","messageId":"177","endLine":1,"endColumn":25},{"ruleId":"174","severity":1,"message":"184","line":2,"column":9,"nodeType":"176","messageId":"177","endLine":2,"endColumn":20},{"ruleId":"185","severity":1,"message":"186","line":10,"column":12,"nodeType":"187","endLine":10,"endColumn":94},{"ruleId":"174","severity":1,"message":"188","line":4,"column":9,"nodeType":"176","messageId":"177","endLine":4,"endColumn":19},{"ruleId":"174","severity":1,"message":"184","line":4,"column":21,"nodeType":"176","messageId":"177","endLine":4,"endColumn":32},{"ruleId":"174","severity":1,"message":"189","line":4,"column":34,"nodeType":"176","messageId":"177","endLine":4,"endColumn":42},{"ruleId":"174","severity":1,"message":"190","line":4,"column":44,"nodeType":"176","messageId":"177","endLine":4,"endColumn":53},{"ruleId":"174","severity":1,"message":"191","line":4,"column":55,"nodeType":"176","messageId":"177","endLine":4,"endColumn":60},{"ruleId":"174","severity":1,"message":"192","line":4,"column":62,"nodeType":"176","messageId":"177","endLine":4,"endColumn":74},{"ruleId":"174","severity":1,"message":"193","line":1,"column":29,"nodeType":"176","messageId":"177","endLine":1,"endColumn":38},{"ruleId":"174","severity":1,"message":"192","line":4,"column":9,"nodeType":"176","messageId":"177","endLine":4,"endColumn":21},{"ruleId":"174","severity":1,"message":"182","line":1,"column":8,"nodeType":"176","messageId":"177","endLine":1,"endColumn":13},{"ruleId":"174","severity":1,"message":"182","line":1,"column":8,"nodeType":"176","messageId":"177","endLine":1,"endColumn":13},{"ruleId":"174","severity":1,"message":"194","line":1,"column":16,"nodeType":"176","messageId":"177","endLine":1,"endColumn":27},{"ruleId":"174","severity":1,"message":"193","line":1,"column":29,"nodeType":"176","messageId":"177","endLine":1,"endColumn":38},{"ruleId":"174","severity":1,"message":"195","line":2,"column":8,"nodeType":"176","messageId":"177","endLine":2,"endColumn":9},{"ruleId":"174","severity":1,"message":"196","line":3,"column":9,"nodeType":"176","messageId":"177","endLine":3,"endColumn":13},{"ruleId":"174","severity":1,"message":"192","line":4,"column":9,"nodeType":"176","messageId":"177","endLine":4,"endColumn":21},{"ruleId":"174","severity":1,"message":"197","line":6,"column":18,"nodeType":"176","messageId":"177","endLine":6,"endColumn":27},{"ruleId":"174","severity":1,"message":"192","line":3,"column":9,"nodeType":"176","messageId":"177","endLine":3,"endColumn":21},{"ruleId":"174","severity":1,"message":"198","line":6,"column":9,"nodeType":"176","messageId":"177","endLine":6,"endColumn":17},{"ruleId":"174","severity":1,"message":"182","line":1,"column":8,"nodeType":"176","messageId":"177","endLine":1,"endColumn":13},{"ruleId":"174","severity":1,"message":"194","line":1,"column":16,"nodeType":"176","messageId":"177","endLine":1,"endColumn":27},{"ruleId":"174","severity":1,"message":"195","line":2,"column":8,"nodeType":"176","messageId":"177","endLine":2,"endColumn":9},{"ruleId":"174","severity":1,"message":"190","line":3,"column":48,"nodeType":"176","messageId":"177","endLine":3,"endColumn":57},{"ruleId":"174","severity":1,"message":"199","line":4,"column":9,"nodeType":"176","messageId":"177","endLine":4,"endColumn":19},{"ruleId":"174","severity":1,"message":"200","line":5,"column":9,"nodeType":"176","messageId":"177","endLine":5,"endColumn":16},{"ruleId":"174","severity":1,"message":"198","line":6,"column":9,"nodeType":"176","messageId":"177","endLine":6,"endColumn":17},{"ruleId":"174","severity":1,"message":"201","line":12,"column":6,"nodeType":"176","messageId":"177","endLine":12,"endColumn":21},{"ruleId":"185","severity":1,"message":"186","line":8,"column":13,"nodeType":"187","endLine":8,"endColumn":91},{"ruleId":"178","replacedBy":"202"},{"ruleId":"180","replacedBy":"203"},{"ruleId":"174","severity":1,"message":"204","line":4,"column":9,"nodeType":"176","messageId":"177","endLine":4,"endColumn":16},{"ruleId":"174","severity":1,"message":"192","line":6,"column":9,"nodeType":"176","messageId":"177","endLine":6,"endColumn":21},{"ruleId":"174","severity":1,"message":"189","line":6,"column":23,"nodeType":"176","messageId":"177","endLine":6,"endColumn":31},{"ruleId":"185","severity":1,"message":"186","line":10,"column":10,"nodeType":"187","endLine":10,"endColumn":92},{"ruleId":"205","severity":1,"message":"206","line":8,"column":64,"nodeType":"207","messageId":"208","endLine":8,"endColumn":65},{"ruleId":"174","severity":1,"message":"209","line":6,"column":13,"nodeType":"176","messageId":"177","endLine":6,"endColumn":18},{"ruleId":"185","severity":1,"message":"186","line":20,"column":26,"nodeType":"187","endLine":24,"endColumn":23},{"ruleId":"178","replacedBy":"210"},{"ruleId":"180","replacedBy":"211"},{"ruleId":"174","severity":1,"message":"212","line":75,"column":5,"nodeType":"176","messageId":"177","endLine":75,"endColumn":21},{"ruleId":"174","severity":1,"message":"213","line":3,"column":8,"nodeType":"176","messageId":"177","endLine":3,"endColumn":13},{"ruleId":"174","severity":1,"message":"214","line":14,"column":16,"nodeType":"176","messageId":"177","endLine":14,"endColumn":29},{"ruleId":"174","severity":1,"message":"215","line":14,"column":31,"nodeType":"176","messageId":"177","endLine":14,"endColumn":41},{"ruleId":"174","severity":1,"message":"216","line":1,"column":29,"nodeType":"176","messageId":"177","endLine":1,"endColumn":38},{"ruleId":"174","severity":1,"message":"217","line":7,"column":44,"nodeType":"176","messageId":"177","endLine":7,"endColumn":58},{"ruleId":"174","severity":1,"message":"218","line":9,"column":8,"nodeType":"176","messageId":"177","endLine":9,"endColumn":13},{"ruleId":"174","severity":1,"message":"219","line":10,"column":9,"nodeType":"176","messageId":"177","endLine":10,"endColumn":22},{"ruleId":"174","severity":1,"message":"220","line":10,"column":24,"nodeType":"176","messageId":"177","endLine":10,"endColumn":34},{"ruleId":"174","severity":1,"message":"221","line":12,"column":6,"nodeType":"176","messageId":"177","endLine":12,"endColumn":22},{"ruleId":"174","severity":1,"message":"222","line":27,"column":7,"nodeType":"176","messageId":"177","endLine":27,"endColumn":18},{"ruleId":"174","severity":1,"message":"223","line":28,"column":11,"nodeType":"176","messageId":"177","endLine":28,"endColumn":19},{"ruleId":"174","severity":1,"message":"224","line":3,"column":23,"nodeType":"176","messageId":"177","endLine":3,"endColumn":31},{"ruleId":"174","severity":1,"message":"209","line":6,"column":13,"nodeType":"176","messageId":"177","endLine":6,"endColumn":18},{"ruleId":"174","severity":1,"message":"225","line":7,"column":9,"nodeType":"176","messageId":"177","endLine":7,"endColumn":15},{"ruleId":"174","severity":1,"message":"218","line":8,"column":8,"nodeType":"176","messageId":"177","endLine":8,"endColumn":13},{"ruleId":"174","severity":1,"message":"214","line":8,"column":16,"nodeType":"176","messageId":"177","endLine":8,"endColumn":29},{"ruleId":"174","severity":1,"message":"215","line":8,"column":31,"nodeType":"176","messageId":"177","endLine":8,"endColumn":41},{"ruleId":"185","severity":1,"message":"186","line":55,"column":26,"nodeType":"187","endLine":58,"endColumn":23},"@typescript-eslint/no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["226"],"no-negated-in-lhs",["227"],"'React' is defined but never used.","'ReactType' is defined but never used.","'MessageType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'DialogType' is defined but never used.","'PostType' is defined but never used.","'StoreType' is defined but never used.","'store' is defined but never used.","'ActionsTypes' is defined but never used.","'RefObject' is defined but never used.","'ChangeEvent' is defined but never used.","'s' is defined but never used.","'Post' is defined but never used.","'PostsType' is defined but never used.","'Simulate' is defined but never used.","'DialogItem' is defined but never used.","'Message' is defined but never used.","'DialogsPageType' is defined but never used.",["226"],["227"],"'Myposts' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'axios' is defined but never used.",["226"],["227"],"'initialStateType' is assigned a value but never used.","'Users' is defined but never used.","'AxiosResponse' is defined but never used.","'AxiosError' is defined but never used.","'useEffect' is defined but never used.","'NewMessageType' is defined but never used.","'Axios' is defined but never used.","'setTotalCount' is defined but never used.","'SetUsersAC' is defined but never used.","'DialogsPagesType' is defined but never used.","'currentPage' is assigned a value but never used.","'pageSize' is assigned a value but never used.","'userType' is defined but never used.","'render' is defined but never used.","no-global-assign","no-unsafe-negation"]